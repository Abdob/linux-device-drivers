diff --git a/char_assignment/CDD2.c b/char_assignment/CDD2.c
index 1ace71c..928f811 100644
--- a/char_assignment/CDD2.c
+++ b/char_assignment/CDD2.c
@@ -107,41 +107,33 @@ static int CDD_release (struct inode *inode, struct file *file)
 static ssize_t CDD_read (struct file *file, char *buf, 
 size_t count, loff_t *ppos)
 {
-	int err;
+	int len, err;
  	struct CDDdev_struct *thisCDD=file->private_data;
 
-  if( *ppos >= thisCDD->counter) return 0;
-  else if( *ppos + count >= thisCDD->counter)
-    count = thisCDD->counter - *ppos;
+	if( thisCDD->counter <= 0 ) return 0;
 
-  if( count <= 0 ) return 0;    
-	printk(KERN_ALERT "CDD_read: count=%lu\n", count);
+	err = copy_to_user(buf,thisCDD->CDD_storage,thisCDD->counter);
 
-	// bzero(buf,64);  // a bogus 64byte initialization
-	memset(buf,0,64);  // a bogus 64byte initialization
-	err = copy_to_user(buf,&(thisCDD->CDD_storage[*ppos]),count);
 	if (err != 0) return -EFAULT;
-	
-	buf[count]=0;
-	*ppos += count;
-	return count;
+
+	len = thisCDD->counter;
+	thisCDD->counter = 0;
+	return len;
 }
 
 static ssize_t CDD_write (struct file *file, const char *buf, 
 size_t count, loff_t *ppos)
 {
-	int err, pos=0;
-	struct CDDdev_struct *thisCDD=file->private_data;
-
-	pos=(thisCDD->append)?thisCDD->counter:*ppos;
+	int err;
+       	struct CDDdev_struct *thisCDD=file->private_data;
 
-	err = copy_from_user(&(thisCDD->CDD_storage[pos]),buf,count);
+	err = copy_from_user(thisCDD->CDD_storage,buf,count);
 	if (err != 0) return -EFAULT;
 
 	thisCDD->counter += count;
-	*ppos+=count;
 	return count;
 }
+
 static loff_t CDD_llseek (struct file *file, loff_t newpos, int whence)
 {
   int pos;
@@ -174,7 +166,7 @@ static struct file_operations CDD_fops =
 	open:		CDD_open, 		// open method 
 	read:   CDD_read,			// read method 
 	write:  CDD_write, 		// write method 
-	llseek: CDD_llseek,  	// covered in detail in Ch6. Just for fwd ref now.
+	//llseek: CDD_llseek,  	// covered in detail in Ch6. Just for fwd ref now.
 	release:CDD_release 	// release method
 };
 
